{"version":3,"file":"0.bundle.js","sources":["webpack:///./js/APP.js","webpack:///./js/AnnotationTable.js","webpack:///./js/ControlStlViewer.js","webpack:///./js/MarkerTable.js","webpack:///./js/ObjectTable.js","webpack:///./js/StlViewer.js","webpack:///./js/csv.js","webpack:///./js/init.js","webpack:///./js/util.js"],"sourcesContent":["export const APP = {};\nwindow.APP = APP;","import { APP } from \"./APP\";\n\nconst mutatorClip = (value, data, type, mutatorParams, component) => {\n  const min = mutatorParams.min;\n  const max = mutatorParams.max;\n  return value <= min ? min :\n         value >= max ? max :\n         value;\n}\n\nconst mutatorParamsClip = {min: 0, max: 255};\n\n// 0-1までのなるべく離れた値を返す\nconst reversalBit = index => {\n  let original = index, fraction = 1, value = 0;\n  while(original) {\n    const bit = original % 2;\n    original = (original - bit) / 2;\n    fraction /= 2;\n    value += bit * fraction;\n  }\n  return value;\n}\n\n// 彩度が最大で、なるべく異なる色相の色を返す\nconst getRandomColor = (index) => {\n  const value = ((reversalBit(index - 1)) % 1) * 3;\n  const mainColorType = Math.floor(value);\n  const subColorValue = Math.floor((value - mainColorType) * 255);\n  const colors = [subColorValue, 255 - subColorValue];\n  colors.splice(mainColorType, 0, 0);\n  return {\n    r: colors[0],\n    g: colors[1],\n    b: colors[2],\n  }\n}\n\nexport const updateColorOptionsOnAnnotator = () => {\n  const activeColors = [];\n  const colorParams = {\n    eraser: {r: 1, g: 1, b: 1},\n  };\n  const tableData = AnnotationTable.getData(\"active\");\n  let targetColorId = null;\n  for (const row of tableData) {\n    colorParams[row.id] = {r: row.r / 255, g: row.g / 255, b: row.b / 255};\n    if(row.target) {\n      targetColorId = row.id;\n    } else if (row.visibility) {\n      activeColors.push(row.id);\n    }\n  }\n  if(targetColorId) {\n    activeColors.unshift(targetColorId);\n  }\n\n  let colorOptions = {\n    activeColors: activeColors,\n    colorParams: colorParams,\n    eraser: !APP.annotation_paint_mode,\n    overwrite: APP.annotation_overwrite\n  }\n  console.log(colorOptions);\n  setColorOptions(colorOptions, {scene: APP.scene});\n};\n\nexport const AnnotationTable = new Tabulator('#AnnotationTable', {\n\tlayout:\"fitColumns\",\n\tautoResize:true,\n\tresponsiveLayout:\"hide\",\n\ttooltips:true,\n\taddRowPos:\"top\",\n\thistory:true,\n\tpagination:\"local\",\n\tpaginationSize:10,\n\tresizableRows:true,\n\t//selectable: 1,\n\tmovableRows: true,\n\tinitialSort:[{column:\"id\", dir:\"dsc\"},],\n\tcolumns:[\n      {title: \"Delete\", formatter: \"buttonCross\",  align: \"center\", cellClick: (e, cell) => {cell.getRow().delete()}, headerSort:false},\n      {title: \"Visible\", field:\"visibility\", width: 73, align:\"center\", formatter:\"tickCross\", headerSort:false, cellClick: (e, cell)=>{\n        const value = cell.getRow().getData();\n        cell.setValue(!value.visibility || value.target);\n        updateColorOptionsOnAnnotator();\n    }},\n      {title: \"Target\", field:\"target\", width: 73, align:\"center\", formatter:\"tickCross\", headerSort:false, cellClick: (e, cell)=>{\n        const table = AnnotationTable;\n        const value = cell.getRow().getData();\n        table.setData(table.getData(\"active\").map(item => { \n          item = Object.assign({}, item);\n          item.debug = true;\n          item.target = value.id == item.id;\n          item.visibility = item.visibility || item.target;\n          return item;  \n        }))\n        updateColorOptionsOnAnnotator();\n      }},\n\t    {title: \"ID\", field:\"id\", width: 40},\n\t    {title: \"Name\", field: \"name\"},\n   \t  {title: \"R\", field: \"r\", minwidth: 30, width: 35, align: \"right\", visible: true, editor: \"number\", editorParams: {min:0, max: 255, step: 1}, mutator: mutatorClip, mutatorParams: mutatorParamsClip, headerSort:false},\n\t    {title: \"G\", field: \"g\", minwidth: 30, width: 35, align: \"right\", visible: true, editor: \"number\", editorParams: {min:0, max: 255, step: 1}, mutator: mutatorClip, mutatorParams: mutatorParamsClip, headerSort:false},\n\t    {title: \"B\", field: \"b\", minwidth: 30, width: 35, align: \"right\", visible: true, editor: \"number\", editorParams: {min:0, max: 255, step: 1}, mutator: mutatorClip, mutatorParams: mutatorParamsClip, headerSort:false},\n\t    {title: \"Area\", field: \"area\"},\n\t    {title: \"Volume\", field: \"volume\"}\n\t],  \n  rowMoved: (row) => {\n    updateColorOptionsOnAnnotator()\n  },\n  rowDeleted: (row) => {\n    updateColorOptionsOnAnnotator()\n  }\n});\n\nwindow.switchAnnotation = (checked) => {\n\tAPP.annotation_mode = checked;\n\tAPP.controls.noRotate = checked;\n}; \n\nwindow.switchEraserAnnotation = (checked) => {\n\tAPP.annotation_paint_mode = checked;\n  updateColorOptionsOnAnnotator()\n};\n\nwindow.setAnnotationOverwrite = (checked) => {\n  APP.annotation_overwrite = checked;\n  updateColorOptionsOnAnnotator()\n}\n\nlet annotationId = 0;\n$('#button-add-annotation-layer').on('click', (event) => {\n    annotationId++;\n    const hasTarget = AnnotationTable.getData(\"active\").some(item => item.target);\n    var layer = Object.assign({id: annotationId, name: \"Layer\" + String(annotationId), area:0, volume: 0, visibility: true, target: !hasTarget}, getRandomColor(annotationId));\n    AnnotationTable.addData(layer);\n    updateColorOptionsOnAnnotator()\n});\n\n$('#save-annotation-table-csv').on('click', (event) => {\n  downloadAnnotationTableAsCSV();\n});\n\nconst downloadAnnotationTableAsCSV = () => {\n  const tableData = AnnotationTable.getData(\"active\");\n  const csvData = [[\"id\", \"name\", \"r\", \"g\", \"b\", \"area\"]]\n  for (const row of tableData) {\n    csvData.push([row.id, row.name, row.r, row.g, row.b]);\n  }\n\n  const csvContent = \"data:text/csv;charset=utf-8,\" +\n  csvData.map(e => e.join(\",\")).join(\"\\n\");\n  const encodeUri = encodeURI(csvContent);\n  // window.open(encodeUri); This also download CSV file\n  \n  const link = document.createElement(\"a\");\n  link.setAttribute(\"href\", encodeUri);\n  link.setAttribute(\"download\", \"annotation.csv\");\n  document.body.appendChild(link);\n  link.click();\n};\n","import { APP } from \"./APP\";\n//\n//\n//\nwindow.BackgroundWhiteBlack = function (ischecked) {\n\t\tif( ischecked == true ) {\n\t\t\tAPP.setBackGroundColor( 0x000000 );\n\t\t\tAPP.BackGroundColor = 'Black';\n\t\t\tAPP.setBoundingBoxColor( 0xffffff );\n   \t\t\t}\n\t\telse {\n\t\t    APP.setBackGroundColor( 0xffffff );\n      \t\tAPP.BackGroundColor = 'White';\n      \t\tAPP.setBoundingBoxColor( 0x000000 );\n\t\t\t}\n      }\nwindow.FrameOffOn =  function (ischecked) {\n\t\tif( ischecked == true ) {\n      \t\tAPP.addBoundingBox();\n   \t\t\t}\n\t\telse {\n\t\t\tAPP.removeBoundingBox();\n\t\t\t}\n      }\nwindow.DirLight = function (isnum) {\n\t\tAPP.directionalLight.intensity = isnum / 100;\n      }\nwindow.AmbLight = function (isnum) {\n\t\tAPP.ambientLight.intensity = isnum / 100;\n      }\n\nwindow.MarkerOffOn = function (ischecked) {\n\t\tif( ischecked == true ) {\n      \t\tAPP.MarkerOffOn = 1;\n   \t\t\t}\n\t\telse {\n\t\t\tAPP.MarkerOffOn = 0;\n\t\t\t}\n      }\n\nwindow.SaveImage = function (ischecked) {\n\tlet canvas = document.getElementById(\"myCanvas\").querySelector('canvas');\n\n\tlet link = document.createElement(\"a\");\n\tlink.href = canvas.toDataURL(\"image/png\");\n\tlink.download = \"Screenshot.png\";\n\tlink.click();\n\t}\n\n","import { APP } from \"./APP\";\nimport { parseCSV, csvFormatter } from \"./csv\";\n\nexport const ObjMarkerTable = new Tabulator(\"#MarkerTable\", {\n\tlayout:\"fitColumns\",      //fit columns to width of table\n\tautoResize:true,\n\tresponsiveLayout:\"hide\",  //hide columns that dont fit on the table\n\ttooltips:true,            //show tool tips on cells\n\taddRowPos:\"top\",          //when adding a new row, add it to the top of the table\n\thistory:true,             //allow undo and redo actions on the table\n\tpagination:\"local\",       //paginate the data\n\tpaginationSize:10,         //allow 7 rows per page of data\n\tresizableRows:true,       //allow row order to be changed\n\tinitialSort:[             //set the initial sort order of the data\n\t\t{column:\"id\", dir:\"dsc\"},\n\t],\n\tcolumns:[                 //define the table columns\n    // ActやX,Y,Zはダウンロード時に除外されないよう定義しておく。ただしカラムvisible: falseにして非表示にする\n    {title:\"Act\", field: \"act\", download: true, visible: false},\n\t\t{title:\"Delete\", formatter:\"buttonCross\", width: 73, align:\"center\", editor:\"tickCross\", editable: onDeleteCheck, download: false},\n\t\t{title:\"ID\", field:\"id\", width: 40},\n\n    // マーカー名を入力する時に日本語などASCII外が入力されないようにする\n    // 入力されるとCSVファイルダウンロード→インポートを通して文字化けが発生するため、[ a-zA-Z0-9_-] のみ使用可能とする\n\t\t{title:\"Name\", field:\"name\", width: 70, editor:\"input\", validator: function(cell, value, parameters) {\n      return util.isMarkerName(value);\n    }},\n\n\t\t{title:\"Parent ID\", field:\"parentid\", width: 70},\n\t\t{title:\"Radius\", field:\"radius\", width: 60, align:\"right\", editor:\"number\",editorParams:{min:0.2, max:24, step:0.2}},\n\t\t{title:\"R\", field:\"r\", minWidth: 30, width: 35, align:\"right\", editor:\"range\",editorParams:{min:0, max:255, step:1}},\n\t\t{title:\"G\", field:\"g\", minWidth: 30, width: 35, align:\"right\", editor:\"range\",editorParams:{min:0, max:255, step:1}},\n\t\t{title:\"B\", field:\"b\", minWidth: 30, width: 35, align:\"right\", editor:\"range\",editorParams:{min:0, max:255, step:1}},\n    {title:\"X\", field:\"x\", download: true, visible: false},\n    {title:\"Y\", field:\"y\", download: true, visible: false},\n    {title:\"Z\", field:\"z\", download: true, visible: false}\n\t],\n\n  // セルが編集されたとき\n  cellEdited: function(cell) {\n    // 渡ってくるパラメータcellについて: http://tabulator.info/docs/4.1/components#component-cell\n    // 編集後の値\n    var cellValue = cell.getValue();\n    // 編集前の値\n    var cellOldValue = cell.getOldValue();\n    // 編集対象のセルがある列\n    var row = cell.getRow();\n    var act = row.getData().act;\n    var id  = row.getData().id;\n    var radius  = row.getData().radius;\n    var r   = row.getData().r;\n    var g   = row.getData().g;\n    var b   = row.getData().b;\n    var columnField = cell.getColumn().getField();\n\n    if (columnField == 'radius') {\n      APP.changeMarkerRadius(id, radius);\n    }\n\n    if (columnField == 'r' || columnField == 'g' || columnField == 'b') {\n      APP.changeMarkerColor(id, r*256*256+g*256+b*1);\n    }\n   }\n});\n\n\n// 「Import CSV」ボタンを押したとき\n$('#import-csv-marker-table').on('change', onImportCSVFileSelect);\n\n// 「Clear」ボタンを押したら3Dマーカーをクリアする\n$('#clear-marker-table').on('click', function(event) {\n  clearMarkerTable();\n  return false;\n});\n\n// 「Download CSV」ボタンを押したとき\n$('#save-marker-table-csv').on('click', function(event) {\n  downloadMarkerTableAsCSV();\n  return false;\n});\n\n\n// Deleteのチェックが押されたとき\nfunction onDeleteCheck(cell) {\n  var data = cell.getRow().getData();\n  APP.removeMarker(data.id);\n  cell.getRow().delete();\n}\n\n// 「Import CSV」ボタンが押されてファイルを選択したとき\nfunction onImportCSVFileSelect(event) {\n  var file = event.originalEvent.target.files[0];\n\n  var reader = new FileReader();\n  reader.onload = function(e) {\n    var csvFileContent = e.target.result;\n    var parsedData = parseCSV(csvFileContent);\n\n    // 1行目のタイトルを除外\n    parsedData.shift();\n    // タイトルフィールドを変換\n    var markers = replaceColumnTitle(ObjMarkerTable, parsedData);\n\n    // 同じ座標のためスキップした数\n    var sameCoordinatesCount = 0;\n    // Parent ID のオブジェクトが非表示のためスキップした数\n    var parentNotVisibleCount = 0;\n\n    markers.forEach(function(markerData) {\n      if (!validateMarkerDataType(markerData)) {\n        // 不正な値があったらスキップ\n        console.error(\"Invalid marker data\", markerData);\n      } else if (!validateMarkerDataXYZ(markerData)) {\n        // すでに同じ座標で定義済みだったらスキップ\n        console.warn(\"Skipped: The loaded marker has been defined as same coordinates.\", markerData);\n        sameCoordinatesCount++;\n      } else {\n        var isAdded = APP.renderMarker(markerData);\n        if (!isAdded) {\n          // Parent ID のオブジェクトが非表示だったらエラーを出す\n          console.warn(\"Skipped: The loaded marker's parent object has not visible.\", markerData);\n          parentNotVisibleCount++;\n        }\n      }\n    });\n\n    var errorMsg = [];\n    if (sameCoordinatesCount) {\n      errorMsg.push(sameCoordinatesCount + \" Skipped: The loaded marker has been defined as same coordinates.\");\n    }\n    if (parentNotVisibleCount) {\n      errorMsg.push(parentNotVisibleCount + \" Skipped: The loaded marker's parent object has not visible.\");\n    }\n    if (errorMsg.length) {\n      // スキップしたとき毎回アラートを出すとアラート数が増えすぎるのでまとめて通知する\n      alert(errorMsg.join(\"\\n\"));\n    }\n\n    // 選択したファイル情報をクリア。これをしないと同じファイルを再度読み込めない\n    $('#import-csv-marker-table').val('');\n  };\n  reader.readAsText(file);\n}\n\n/**\n * MarkerTableが空かどうか\n *\n * @return {bool}\n */\nfunction isMarkerTableEmpty() {\n  return ObjMarkerTable.getDataCount() === 0;\n}\n\n/**\n * MarkerTableをクリアする\n */\nfunction clearMarkerTable() {\n  var rows = ObjMarkerTable.getRows();\n  rows.forEach(function(row) {\n    APP.removeMarker(row.getData().id);\n    row.delete();\n  });\n}\n\n/**\n * MarkerTableをCSVでダウンロードする\n */\nfunction downloadMarkerTableAsCSV() {\n  ObjMarkerTable.download(csvFormatter, 'MarkerTable.csv');\n}\n\n/**\n * テーブルカラムのタイトルとフィールドのペアを取得する\n *\n * @example\n * getColumnFieldTitlePairs(ObjMarkerTable)\n * {\n *   \"Act\": \"act\"\n *   \"ID\": \"id\"\n *   \"Name\": \"name\"\n *   \"Parent ID\": \"parentid\"\n *   \"Radius\": \"radius\"\n *   \"R\": \"r\"\n *   \"G\": \"g\"\n *   \"B\": \"b\"\n *   \"X\": \"x\"\n *   \"Y\": \"y\"\n *   \"Z\": \"z\"\n * }\n */\nfunction getColumnFieldTitlePairs(table) {\n  var columnDefinitions = table.getColumnDefinitions();\n  var fieldTitlePairs = {};\n  columnDefinitions.forEach(function(column) {\n    fieldTitlePairs[column.title] = column.field;\n  });\n  return fieldTitlePairs;\n}\n\n/**\n * キーがのタイトルのJSONデータをフィールド名にを変換する\n * CSVの1行目タイトルは表記用のものでスペースも含まれるため、内部キー名に変換する\n *\n * @example\n * replaceColumnTitle(ObjMarkerTable, {\n *   \"Act\": \"1\"\n *   \"ID\": \"2\"\n *   \"Name\": \"Marker1\"\n *   \"Parent ID\": \"3036\"\n *   \"Radius\": \"2\"\n *   \"R\": \"255\"\n *   \"G\": \"0\",\n *   ...\n * });\n *\n * // 以下のようになる\n * {\n *   \"act\": \"1\"\n *   \"id\": \"2\"\n *   \"name\": \"Marker1\"\n *   \"parentid\": \"3036\"\n *   \"radius\": \"2\"\n *   \"r\": \"255\"\n *   \"g\": \"0\",\n *   ...\n * }\n */\nfunction replaceColumnTitle(table, json) {\n  var fieldTitlePairs = getColumnFieldTitlePairs(table);\n  return json.reduce(function(memo, data) {\n    var newData = {};\n    Object.keys(data).forEach(function(key) {\n      var value = data[key];\n      var newKey = fieldTitlePairs[key];\n      newData[newKey] = value;\n    });\n    memo.push(newData);\n    return memo;\n  }, []);\n}\n\n\n/**\n * renderMarkerに渡されるパラメータが適切な値かチェックする\n * CSVファイルから読まれ不正な値の可能性があるので扱える値かどうかを調べる\n *\n * @param  {Object} markerData renderMarkerの引数と同じ\n * @return {bool} すべての値が適切ならtrue,そうじゃないならfalse\n */\nfunction validateMarkerDataType(markerData) {\n  if (!util.isNumeric(markerData.act)) {\n    return false;\n  }\n  if (!util.isNumeric(markerData.id)) {\n    return false;\n  }\n  if (!util.isNumeric(markerData.parentid)) {\n    return false;\n  }\n  if (!util.isNumeric(markerData.radius)) {\n    return false;\n  }\n  if (!util.isNumeric(markerData.r)) {\n    return false;\n  }\n  if (!util.isNumeric(markerData.g)) {\n    return false;\n  }\n  if (!util.isNumeric(markerData.b)) {\n    return false;\n  }\n  if (!util.isNumeric(markerData.x)) {\n    return false;\n  }\n  if (!util.isNumeric(markerData.y)) {\n    return false;\n  }\n  if (!util.isNumeric(markerData.z)) {\n    return false;\n  }\n  if (!util.isMarkerName(markerData.name)) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * CSVファイルから読み込んだMarkerデータで、表示中のMarkerTableと同じ座標のものがあるかチェックする\n *\n * @param  {Object} markerData renderMarkerの引数と同じ\n * @return {bool} すべての値が適切ならtrue,そうじゃないならfalse\n */\nfunction validateMarkerDataXYZ(markerData) {\n  var rows = ObjMarkerTable.getRows();\n  return rows.every(function(row) {\n    var rowData = row.getData();\n    var rowX = rowData.x;\n    var rowY = rowData.y;\n    var rowZ = rowData.z;\n    var markerDataX = Number(markerData.x);\n    var markerDataY = Number(markerData.y);\n    var markerDataZ = Number(markerData.z);\n\n    // 浮動小数点数のため、小数点2桁までで比較する。だいたい同じ座標かどうかチェックする\n    if (rowX.toFixed(2) === markerDataX.toFixed(2) &&\n        rowY.toFixed(2) === markerDataY.toFixed(2) &&\n        rowZ.toFixed(2) === markerDataZ.toFixed(2)) {\n      // 同じ座標\n      return false;\n    }\n    return true;\n  });\n}\n","import { APP } from \"./APP\";\nimport { csvFormatter } from \"./csv\";\n\nvar ObjObjextTable = new Tabulator(\"#ObjectTable\", {\n\tajaxURL:\"./data/segmentInfo.json\",\n\tlayout:\"fitColumns\",      //fit columns to width of table\n\tautoResize:true,\n\tresponsiveLayout:\"hide\",  //hide columns that dont fit on the table\n\ttooltips:true,            //show tool tips on cells\n\taddRowPos:\"top\",          //when adding a new row, add it to the top of the table\n\thistory:true,             //allow undo and redo actions on the table\n\tpagination:\"local\",       //paginate the data\n\tpaginationSize:10,         //allow 7 rows per page of data\n\tresizableRows:true,       //allow row order to be changed\n\tinitialSort:[             //set the initial sort order of the data\n\t\t{column:\"name\", dir:\"asc\"},\n\t],\n\tcolumns:[                 //define the table columns\n    // ActやConfidenceはダウンロード時に除外されないよう定義しておく。ただしカラムvisible: falseにして非表示にする\n    {title:\"Act\", field: \"act\", download: true, visible: false},\n\t\t{title:\"Visible\", field:\"act\", width: 73, align:\"center\",formatter:\"tickCross\", cellClick: (e, cell)=>{cell.setValue(!cell.getValue());}, download: false},\n\t\t{title:\"ID\", field:\"id\", width: 50},\n\t\t{title:\"Name\", field:\"name\", editor:\"input\"},\n\t\t{title:\"Size\", field:\"size\", width:60, align:\"right\"},\n    {title:\"Confidence\", field: \"confidence\", download: true, visible: false},\n\t\t{title:\"R\", field:\"r\", minWidth: 30, width: 35, align:\"right\", editor:\"range\",editorParams:{min:0, max:255, step:1}},\n\t\t{title:\"G\", field:\"g\", minWidth: 30, width: 35, align:\"right\", editor:\"range\",editorParams:{min:0, max:255, step:1}},\n\t\t{title:\"B\", field:\"b\", minWidth: 30, width: 35, align:\"right\", editor:\"range\",editorParams:{min:0, max:255, step:1}},\n\t],\n\n\t// セルが編集されたとき\n  cellEdited: function(cell) {\n      // 渡ってくるパラメータcellについて: http://tabulator.info/docs/4.1/components#component-cell\n      // 編集後の値\n      var cellValue = cell.getValue();\n      // 編集前の値\n      var cellOldValue = cell.getOldValue();\n      // 編集対象のセルがある列\n      var row = cell.getRow();\n      var act = row.getData().act;\n      var id  = row.getData().id;\n      var r   = row.getData().r;\n      var g   = row.getData().g;\n      var b   = row.getData().b;\n      // 編集したセルに対するカラムのフィールド\n      var columnField = cell.getColumn().getField();\n      // console.log(\"編集後の値:\", cellValue, \"編集前の値:\", cellOldValue, \"編集した列:\", row, \"編集したカラム\", columnField);\n\n\t  if(columnField == 'act') {\n\t  \tif(act == true) {\n\t  \t\tconsole.log(\"Requested ID:\", id );\n\t  \t\tvar host = location.hostname ;\n\t  \t\tvar port = location.port;\n\t\t\tconst call_url = \"ws:\"+host+\":\"+port+\"/ws/display\";\n\t\t\tconst filename = \"http://\"+host+\":\"+port+\"/data/i%d.stl\";\n\t\t\tvar connection = new WebSocket(call_url);\n\t\t\tconnection.onopen = function(){ connection.send(id); }\n        \tconnection.onmessage = function (e) {\n        \t\tif(e.data == 'True') {\n        \t\t\tconst target_url = sprintf(filename, id );\n        \t\t\tconsole.log( target_url );\n            \t\tAPP.addSTLObject(target_url, id, r*256*256+g*256+b*1);\n            \t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t  \tif(act == false) {\n\t  \t\tconsole.log(\"Disappear ID:\", id )\n\t\t\tconst filename = sprintf(\"./stls/i%d.stl\", id );\n\t\t\tAPP.removeSTLObject(id);\n\t\t\t}\n\t\t}\n\n\t  if(columnField == 'r' || columnField == 'g' || columnField == 'b') {\n\t  \t\tconsole.log(\"Changecolor ID:\", id )\n\t\t\tAPP.changecolorSTLObject(id, r*256*256+g*256+b*1);\n\t\t}\n    }\n\n});\n\n// 「Download CSV」ボタンを押したとき\n$('#save-object-table-csv').on('click', function(event) {\n  downloadObjectTableAsCSV();\n  return false;\n});\n\n/**\n * ObjectTableをCSVでダウンロードする\n */\nfunction downloadObjectTableAsCSV() {\n  console.log(\"downloadObjectTableAsCSV\");\n  ObjObjextTable.download(csvFormatter, 'ObjextTable.csv');\n}\n","import { AnnotationTable, updateColorOptionsOnAnnotator } from \"./AnnotationTable\";\nimport { APP } from \"./APP\";\nimport { ObjMarkerTable } from \"./MarkerTable\";\n\nvar xratio = 0.6;\nvar yratio = 0.95;\n//var ysize = 600;\n\nvar frustumSize = 1000;\nvar xshift = -64;\nvar yshift = -128-59;\nvar zshift = -64\n\nxshift = 0;\nyshift = 0;\nzshift = 0;\n\nAPP.animate = function() {\n\tAPP.renderer.render( APP.scene, APP.camera );\n\tAPP.controls.update();\n\trequestAnimationFrame( APP.animate );\n};\n\nAPP.dragging = false;\nAPP.annotation_mode = false;\nAPP.annotation_paint_mode = true;\nAPP.annotation_overwrite = false;\n\n// ObtainWindowSize\nfunction onWindowResize() {\n    var aspect = window.innerWidth / window.innerHeight;\n    APP.camera.left   = - frustumSize * aspect / 2;\n    APP.camera.right  =   frustumSize * aspect / 2;\n    APP.camera.top    =   frustumSize / 2;\n    APP.camera.bottom = - frustumSize / 2;\n    APP.camera.updateProjectionMatrix();\n    APP.renderer.setSize( window.innerWidth * xratio, window.innerHeight * yratio);\n\t}\n\n// Add stl objects and a name\nAPP.addSTLObject = function(url, name, objcolor) {\n  var loader = new THREE.STLLoader();\n  loader.load(url, function(bufferGeometry) {\n\t  if (bufferGeometry.isBufferGeometry) {\n\t\t  bufferGeometry.attributes.color = bufferGeometry.attributes.color || bufferGeometry.attributes.position.clone();\n\t\t  bufferGeometry.attributes.color.array.fill(1);\n\t\t  bufferGeometry.attributes.color.needsUpdate = true;\n\t\t  bufferGeometry.colorsNeedUpdate = true;\n\t  }\n\t  const meshMaterial = new THREE.MeshPhongMaterial({\n\t\t  color: objcolor,\n\t\t  specular: 0x776666,\n\t\t  shininess: 0.2,\n\t\t  vertexColors: THREE.FaceColors,\n\t\t  side: true\n\t  })\n\t  var mesh = new THREE.Mesh(bufferGeometry, meshMaterial);\n      mesh.name = name;\n      mesh.scale.set(1, 1, 1);\n      mesh.material.side = THREE.DoubleSide;\n      APP.scene.add(mesh);\n\n      mesh.translateX(xshift);\n      mesh.translateY(yshift);\n\t  mesh.translateZ(zshift);\n\n\t  updateColorOptionsOnAnnotator();\n\n      //APP.scene.getObjectByName('test_name2').rotation.x += 0.005;\n      //APP.scene.getObjectByName('test_name2').rotation.y += 0.005;\n      //console.log('Object name:');\n      //console.log(name);\n      //APP.scene.remove(mesh);\n  });\n}\n\n// Change the color of the stl object specified by a name after generation.\nAPP.changecolorSTLObject = function(name, objcolor){\n\tvar obj = APP.scene.getObjectByName(name);\n\tif ( obj != undefined ) {\n    \t\tobj.material.color.setHex( objcolor );\n\t\t}\n\t}\n\n// Remove a stl object by a name after generation.\nAPP.removeSTLObject = function(name){\n\tvar obj = APP.scene.getObjectByName(name);\n\tif ( obj != undefined ) {\n    \t\tAPP.scene.remove(obj);\n\t\t}\n\t}\n\n// Draw bounding box\nAPP.addBoundingBox = function(){\n\n\tif ( APP.BackGroundColor == 'Black'){\n\t\t  var mat = new THREE.LineBasicMaterial( { color: 0xFFFFFF, linewidth: 2 } );\n\t\t  }\n\telse{\n\t\tvar mat = new THREE.LineBasicMaterial( { color: 0x000000, linewidth: 2 } );\n\t\t}\n\n\tvar geometry = new THREE.BoxBufferGeometry( APP.BoundingboxZ, APP.BoundingboxY, APP.BoundingboxX );\n\tvar geo = new THREE.EdgesGeometry( geometry ); // or WireframeGeometry( geometry )\n\n\tvar boundingbox = new THREE.LineSegments( geo, mat );\n\tboundingbox.name = 'BoundingBox';\n\tboundingbox.scale.set(1,1,1);\n\tAPP.scene.add(boundingbox);\n\tAPP.BoundingBox = 'On';\n\tboundingbox.translateX( APP.BoundingboxZ / 2 );\n\tboundingbox.translateY( APP.BoundingboxY / 2 );\n\tboundingbox.translateZ( APP.BoundingboxX / 2 );\n\t}\n\nAPP.removeBoundingBox = function(){\n\tvar obj = APP.scene.getObjectByName('BoundingBox');\n\tif ( obj != undefined ) {\n    \t\tAPP.scene.remove(obj);\n\t\t}\n\tAPP.BoundingBox = 'Off';\n\t}\n\nAPP.setBoundingBoxColor = function(objcolor){\n\tvar obj = APP.scene.getObjectByName('BoundingBox');\n\tif ( obj != undefined ) {\n    \tobj.material.color.setHex( objcolor );\n\t\t}\n\t}\n\n// Set background color\nAPP.setBackGroundColor = function( backcolor ){\n\t\tAPP.scene.background = new THREE.Color( backcolor );\n\t}\n\nfunction rgb2hex ( rgb ) {\n\treturn \"#\" + rgb.map( function ( value ) {\n\t\treturn ( \"0\" + value.toString( 16 ) ).slice( -2 ) ;\n\t} ).join( \"\" ) ;\n}\n\n// Operation on mouse click\nfunction clickPosition( event ) {\n\tonDragStart(event);\n\t// Location of mouse\n\tvar clientX = event.clientX;\n\tvar clientY = event.clientY;\n\n\n\t// Normalization of location\n\tvar mouse = new THREE.Vector2();\n\tmouse.x = ( ( clientX - APP.renderer.domElement.offsetLeft ) / APP.renderer.domElement.clientWidth ) * 2 - 1;\n\tmouse.y = - ( ( clientY - APP.renderer.domElement.offsetTop ) / APP.renderer.domElement.clientHeight ) * 2 + 1;\n\n\t// Raycasterインスタンス作成\n\tvar raycaster = new THREE.Raycaster();\n\t// 取得したX、Y座標でrayの位置を更新\n\traycaster.setFromCamera( mouse, APP.camera );\n\n\t// Indetify crossing objects.\n\tvar intersects = raycaster.intersectObjects( APP.scene.children );\n\t// Write the most proximal one.\n\tif (Object.keys(intersects).length > 0) {\n\t\tvar objid = intersects[0].object.name;\n\t\tconst target = document.getElementById(\"ClickedObjectID\");\n\t\ttarget.innerHTML = objid;\n\n\t\tif (APP.MarkerOffOn == 1) {\n\t\t\tvar x = intersects[ 0 ].point.x;\n\t\t\tvar y = intersects[ 0 ].point.y;\n\t\t\tvar z = intersects[ 0 ].point.z;\n\n\t\t\t//Append Jsontable\n\t\t\tvar markerName = APP.MarkerPrefix + String(APP.MarkerSuffix);\n\n\t\t\tAPP.addMarker({\n\t\t\t\tact: 1,\n\t\t\t\tname: markerName,\n\t\t\t\tparentid: objid,\n\t\t\t\tradius: APP.MarkerRadius,\n\t\t\t\tr: APP.MarkerR,\n\t\t\t\tg: APP.MarkerG,\n\t\t\t\tb: APP.MarkerB,\n\t\t\t\tx: x,\n\t\t\t\ty: y,\n\t\t\t\tz: z\n\t\t\t});\n\t\t}\n\t}else{\n\t\tconst target = document.getElementById(\"ClickedObjectID\");\n\t\ttarget.innerHTML = \"Background\";\n\t}\n}\n\n/**\n * マーカーを追加する\n *\n * @param {Object} markerData CSVで読み込まれたプロパティを持つオブジェクト。以下のプロパティが有効\n *   - act      : {number} 例: 1\n *   - name     : {string} 例: \"Marker1\"\n *   - parentid : {number} 例: 3036\n *   - radius   : {number} 例: 2.8\n *   - r        : {number} 例: 255\n *   - g        : {number} 例: 30\n *   - b        : {number} 例: 100\n *   - x        : {number} 例: 9.076891761740626\n *   - y        : {number} 例: 10.850928915374125\n *   - z        : {number} 例: 252.16774396931498\n *\n * @param {bool} [isImportFromFile=false] ファイルからの読み込みかどうか。\n *   ファイルからの読み込み時はMarkerがOFFでもMarkerTableに追加する\n * @return {bool} マーカーを追加したらtrueが返る\n */\nAPP.addMarker = function(markerData, isImportFromFile) {\n  var markerData_act = Number(markerData.act);\n  var markerData_name = String(markerData.name);\n  var markerData_parentid = Number(markerData.parentid);\n  var markerData_radius = Number(markerData.radius);\n  var markerData_r = Number(markerData.r);\n  var markerData_g = Number(markerData.g);\n  var markerData_b = Number(markerData.b);\n  var markerData_x = Number(markerData.x);\n  var markerData_y = Number(markerData.y);\n  var markerData_z = Number(markerData.z);\n\n  // CSVファイルからの読み込み時はMarkerがOFFでも描画する(要確認)\n  if (APP.MarkerOffOn == 1 || isImportFromFile) {\n    var color = rgb2hex([markerData_r, markerData_g, markerData_b]);\n\n    // Add sphere\n    var geometry = new THREE.SphereGeometry(1);\n    var material = new THREE.MeshBasicMaterial({ color: color });\n    var sphere = new THREE.Mesh(geometry, material);\n\n    sphere.scale.set(markerData_radius, markerData_radius, markerData_radius);\n    sphere.position.set(markerData_x, markerData_y, markerData_z);\n    sphere.name = 'm' + APP.MarkerID.toString();\n    APP.scene.add(sphere);\n\n    var NewMarker = {\n      act: markerData_act,\n      id: APP.MarkerID,\n      name: markerData_name,\n      parentid: markerData_parentid,\n      radius: markerData_radius,\n      r: markerData_r,\n      g: markerData_g,\n      b: markerData_b,\n      x: markerData_x,\n      y: markerData_y,\n      z: markerData_z\n    };\n\n    ObjMarkerTable.addData(NewMarker);  // Change database MarkerTable (setData)\n    APP.updateMarkerId();\n    return true;\n  }\n  return false;\n};\n\n/**\n * MarkerIDを更新する\n */\nAPP.updateMarkerId = function() {\n  APP.MarkerSuffix = APP.MarkerSuffix + 1;\n  APP.MarkerID = APP.MarkerID + 1;\n  $('#SetSuffixNum').val(APP.MarkerSuffix); // Change suffix for index.html\n};\n\n/**\n * マーカーを描画する\n *\n * @example\n * renderMarker({\n *   \"act\": 1,\n *   \"name\": \"test1\",\n *   \"parentid\": 3000,\n *   \"radius\": 2,\n *   \"r\": 100,\n *   \"g\": 0,\n *   \"b\": 0,\n *   \"x\": 100,\n *   \"y\": 200,\n *   \"z\": 200\n * })\n *\n * @param {Object} markerData CSVで読み込まれたプロパティを持つオブジェクト。addMarkerの引数と同じ\n */\nAPP.renderMarker = function(markerData) {\n  var obj = APP.scene.getObjectByName(Number(markerData.parentid));\n  if (obj == null) {\n    return false;\n  }\n  return APP.addMarker(markerData, true);\n};\n\n// Change the color of the stl object specified by a name after generation.\nAPP.changeMarkerRadius = function(id, r){\n\tvar name = 'm'+ id.toString();\n\tvar obj = APP.scene.getObjectByName(name);\n\tconsole.log(obj);\n\tif ( obj != undefined ) {\n    \t\tobj.scale.set(r,r,r);\n\t\t}\n\t}\n\n// Change the color of the stl object specified by a name after generation.\nAPP.changeMarkerColor = function(id, objcolor){\n\tvar name = 'm'+ id.toString();\n\tvar obj = APP.scene.getObjectByName(name);\n\tif ( obj != undefined ) {\n    \t\tobj.material.color.setHex( objcolor );\n\t\t}\n\t}\n\n// Remove a stl object by a name after generation.\nAPP.removeMarker = function(id){\n\n\t// Remove from scene\n\tvar name = 'm'+ id.toString();\n\tvar obj = APP.scene.getObjectByName(name);\n\tif ( obj != undefined ) {\n    APP.scene.remove(obj);\n\t}\n\n        // Remove from json variable\n\t//var newData = APP.MarkerTable.filter(function(item, index){ if (item.id != id) return true;});\n\t//APP.MarkerTable = newData\n}\n\n\nvar onDragStart = (event) => {\n  APP.dragging = true;\n\tannotate(event);\n}\n\nvar onDragEnd = (event) => {\n\tAPP.dragging = false;\n}\n\nvar annotate = (event) => {\n  if (!APP.dragging) return;\n  if (!APP.annotation_mode) return;\n\tannotateBySphere({\n\t\tx: event.offsetX,\n\t\ty: event.offsetY,\n\t\tcamera: APP.camera,\n\t\tscene: APP.scene,\n\t\tcontainer: APP.renderer.domElement,\n\t\tradius: APP.AnnotatorRadius || 3,\n\t\tignoreBackFace: null,\n  });\n  updateMetricsOnAnnotationTable(AnnotationTable, {scene: APP.scene})\n};\n\nconst updateMetricsOnAnnotationTable = (annotationTable, scene) => {\n\tconst params = getCurrentParams(scene);\n\tconst areas = params.areas;\n\tconst newRows = annotationTable.getData(\"active\").map(_item => {\n\t\tconst item = Object.assign({}, _item);\n\t\titem.area =  areas[item.id] && areas[item.id].toFixed(0);\n\t\treturn item;\n\t})\n\tannotationTable.updateData(newRows);\n};\n\n\nexport function StlViewer() {\n\n\t// Renderer\n\tvar container = document.getElementById('myCanvas');\n\tAPP.renderer = new THREE.WebGLRenderer( { preserveDrawingBuffer: true } );\n\tAPP.renderer.setSize(window.innerWidth * xratio, window.innerHeight * yratio);\n\tcontainer.appendChild( APP.renderer.domElement );\n\n\t // Camera\n\tAPP.camera = new THREE.PerspectiveCamera();\n\tAPP.camera.position.z = 400;\n\t// APP.camera.lookAt(new THREE.Vector3(64, 64, 64));\n\n\t// Scene\n\tAPP.scene = new THREE.Scene();\n\tAPP.scene.add( APP.camera );\n\n\t// Background Color\n\tAPP.scene.background = new THREE.Color( 0xffffff );\n\tAPP.BackGroundColor == 'White';\n\n\t// Light\n\tAPP.directionalLight = new THREE.DirectionalLight(0xffffff);\n\tAPP.directionalLight.position.set(1, 1, 1);\n\tAPP.directionalLight.intensity = 0.8;\n\tAPP.camera.add( APP.directionalLight );\n\tAPP.ambientLight = new THREE.AmbientLight( 0xffffff );\n\tAPP.ambientLight.intensity = 0.5;\n\tAPP.camera.add( APP.ambientLight );\n\n\tvar min = 0 ;\n\tvar max = 255 ;\n\n\t// Controlsを用意\n\tAPP.controls = new THREE.TrackballControls( APP.camera, APP.renderer.domElement );\n  APP.controls.rotateSpeed = 10;\n  APP.animate();\n\n\t// Response to mouse click\n\t\tAPP.renderer.domElement.addEventListener( 'mousedown', clickPosition, false );\n\t\tAPP.renderer.domElement.addEventListener('mouseup', onDragEnd, false);\n\t\tAPP.renderer.domElement.addEventListener('onmousemove', annotate, false);\n\t\tAPP.renderer.domElement.onmousemove = annotate;\n\t// Marker Variables\n\tAPP.MarkerOffOn = 0;\n\tAPP.MarkerR = 255;\n\tAPP.MarkerG = 0;\n\tAPP.MarkerB = 0;\n\tAPP.MarkerPrefix = \"Marker\";\n\tAPP.MarkerSuffix = 0;\n\tAPP.MarkerRadius = 2.0;\n\tAPP.MarkerID     = 1;\n\n\t// Boundingbox variables\n\tvar prot = location.protocol;\n\tvar url = prot +\"/data/Boundingbox.json\";\n\n  // jQuery getJSONを使用\n  $.getJSON(url, function(data) {\n    APP.BoundingboxX = data.x;\n    APP.BoundingboxY = data.y;\n    APP.BoundingboxZ = data.z;\n  });\n}\n\nwindow.addEventListener( 'resize', onWindowResize, false );\n","// TabulatorのcsvFormatterに不具合があるため再定義する\n// csvFormatter from Download.prototype.downloaders in tabulator.js\nexport const csvFormatter = function(columns, data, options, setFileContents, config) {\n  // TabulatorのcsvFormatterは隠れてるカラムがダウンロード対象にならないためカラムを再定義する\n  var columnDefinitions = this.table.getColumnDefinitions();\n  columns = columnDefinitions.filter(function(column) {\n    return column.download !== false;\n  });\n\n  var self = this,\n    titles = [],\n    fields = [],\n    delimiter = options && options.delimiter ? options.delimiter : \",\",\n    fileContents;\n\n  //build column headers\n  function parseSimpleTitles() {\n    columns.forEach(function (column) {\n      titles.push('\"' + String(column.title).split('\"').join('\"\"') + '\"');\n      fields.push(column.field);\n    });\n  }\n\n  function parseColumnGroup(column, level) {\n    if (column.subGroups) {\n      column.subGroups.forEach(function (subGroup) {\n        parseColumnGroup(subGroup, level + 1);\n      });\n    } else {\n      titles.push('\"' + String(column.title).split('\"').join('\"\"') + '\"');\n      fields.push(column.definition.field);\n    }\n  }\n\n  if (config.columnGroups) {\n    console.warn(\"Download Warning - CSV downloader cannot process column groups\");\n    columns.forEach(function (column) {\n      parseColumnGroup(column, 0);\n    });\n  } else {\n    parseSimpleTitles();\n  }\n\n  //generate header row\n  fileContents = [titles.join(delimiter)];\n\n  function parseRows({ data }) {\n    //generate each row of the table\n    data.forEach(function (row) {\n      var rowData = [];\n\n      fields.forEach(function(field) {\n        // getFieldValueを使うと数値がfalseになるため単純にrowの値を使う\n        //var value = self.getFieldValue(field, row);\n        var value = row[field];\n\n        switch (typeof value) {\n          case \"object\":\n            value = JSON.stringify(value);\n            break;\n          case \"undefined\":\n          case \"null\":\n            value = \"\";\n            break;\n        }\n\n        //escape quotation marks\n        rowData.push('\"' + String(value).split('\"').join('\"\"') + '\"');\n      });\n\n      fileContents.push(rowData.join(delimiter));\n    });\n  }\n\n  function parseGroup(group) {\n    if (group.subGroups) {\n      group.subGroups.forEach(function (subGroup) {\n        parseGroup(subGroup);\n      });\n    } else {\n      parseRows(group.rows);\n    }\n  }\n\n  if (config.rowGroups) {\n    console.warn(\"Download Warning - CSV downloader cannot process row groups\");\n    data.forEach(function (group) {\n      parseGroup(group);\n    });\n  } else {\n    parseRows(data);\n  }\n\n  setFileContents(fileContents.join(\"\\n\"), \"text/csv\");\n};\n\n\n/**\n * カンマ区切りのCSV文字列から配列に変換する\n *\n * @param  {string} csv カンマ区切りの文字列\n * @return {Array}  変換した配列\n */\nexport function parseCSV(csv) {\n  var result = [];\n  var array = csv2array(csv);\n\n  for (var i = 1; i < array.length; i++) {\n    result[i - 1] = {};\n    for (var k = 0; k < array[0].length && k < array[i].length; k++) {\n      var key = array[0][k];\n      result[i - 1][key] = array[i][k];\n    }\n  }\n\n  return result;\n}\n\n/**\n * カンマ区切りCSVの一行を配列に変換する\n *\n * 参考: RFC4180 - Common Format and MIME Type for Comma-Separated Values (CSV) Files\n * https://tools.ietf.org/html/rfc4180\n * https://stackoverflow.com/questions/33155999/converting-a-csv-file-into-a-2d-array/33156233\n *\n * @param  {string} csv カンマ区切りの文字列\n * @param  {string} [delimiter=','] 区切り文字。デフォルト=','\n * @return {array} カンマ区切りをを変換した配列\n */\nfunction csv2array(csv, delimiter) {\n  delimiter = delimiter || ',';\n\n  var pattern = new RegExp(\n    // [1] delimiter\n    '(\\\\' + delimiter + '|\\\\r?\\\\n|\\\\r|^)' +\n    '(?:' +\n      // [2] quoted value\n      '\"([^\"]*(?:\"\"[^\"]*)*)\"|' +\n      // [3] standard value\n      '([^\"\\\\' + delimiter + '\\\\r\\\\n]*)'+\n    ')',\n    'gi'\n  );\n\n  var array = [[]];\n  var m, matchedDelimiter, matchedValue;\n\n  while ((m = pattern.exec(csv))) {\n    matchedDelimiter = m[1];\n    if (matchedDelimiter.length && matchedDelimiter !== delimiter) {\n      array.push([]);\n    }\n\n    if (m[2]) {\n      matchedValue = m[2].replace(/\"\"/g, '\"');\n    } else {\n      matchedValue= m[3];\n    }\n    array[array.length - 1].push(matchedValue);\n  }\n\n  return array;\n}\n","import \"../js/ControlStlViewer\";\nimport \"../js/csv\";\nimport \"../js/MarkerTable\";\nimport \"../js/util\";\nimport \"../js/ObjectTable\";\n\nimport { StlViewer } from \"../js/StlViewer\";\nStlViewer();\n\n","var util = {};\n\n/**\n * 有効な数値かどうかチェックする。文字列なら数値として有効かチェックする\n *\n * @example\n * isNumeric(1) // true\n * isNumeric(123.456) // true\n * isNumeric(0) // true\n * isNumeric(-123) // true\n * isNumeric(\"abc\") // false\n * isNumeric(\"123\") // true\n * isNumeric(\"-123\") // true\n *\n * @param  {string|number} n チェックする対象の値\n * @return {boolean}\n */\nutil.isNumeric = function(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\n/**\n * マーカー名として有効かチェック\n * 英数字 [a-zA-Z0-9_-] またはスペースで構成される文字列かどうかチェックする\n *\n * @example\n * isMarkerName('abc') // true\n * isMarkerName('Marker Test 3') // true\n * isMarkerName('マーカー') // false\n *\n * @param  {string} str チェックする対象の文字列\n * @return {boolean}\n */\nutil.isMarkerName = function(string) {\n  return /^(?:[a-zA-Z0-9_-]| )+$/.test(string);\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAYA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AA7CA;AACA;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChKA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3DA;AACA;AA+DA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AAEA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAGA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;ACxmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;AAGA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;AChbA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAPA;AACA;AACA;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;AAWA;AACA;AAEA;AAEA;AAGA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;ACPA;AAEA;;;;;;;;;;;;;;;;AAeA;AACA;AACA;AAEA;;;;;;;;;;;;;;AAYA;AACA;AACA;;;;A","sourceRoot":""}